<?php
// @todo fild propper value.
define('WOVI_DATASOURCE_FIELD_NOT_IMPLEMENTED', '*** NON EXISTING FIELD ***');

/**
 * @file
 * Management module for abstract World Vision datasources.
 */

/**
 * Implements hook_menu().
 */
function wovi_datasource_menu() {
  $items = array();

  $items['admin/config/world-vision/datasource'] = array(
    'title' => 'Datasource',
    'description' => 'All datasource related configuration.',
    'page callback' => 'wovi_datasource_configuration_page',
    'access arguments' => array('administer wovi datasource'),
    'file' => 'wovi_datasource.admin.inc',
  );

  $items['admin/config/world-vision/datasource/instances'] = array(
    'title' => 'Instances',
    'description' => 'Configure all available datasource instances.',
    'page callback' => 'wovi_datasource_configuration_page',
    'access arguments' => array('administer wovi datasource'),
    'file' => 'wovi_datasource.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function wovi_datasource_permission() {
  return array(
    'administer wovi datasource' => array(
      'title' => t('Administer datasources'),
      'description' => t('Allow user to administer all datasources.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function wovi_datasource_theme($existing, $type, $theme, $path) {
  return array(
    'wovi_datasource_configuration_list' => array(
      'variables' => array('content' => NULL),
      'file' => 'wovi_datasource.admin.inc',
    ),
  );
}

/**
 * Implements hook_flush_caches().
 */
function wovi_datasource_flush_caches() {
  return array('wovi_datasource_cache');
}

/**
 * Get datasource information.
 *
 * @param $type
 *   The datasource type, e.g. ivision, for which the info shall be returned, or NULL
 *   to return an array with info about all types.
 *
 * @see hook_wovi_datasource_info()
 * @see hook_wovi_datasource_alter()
 */
function wovi_datasource_get_info($type = NULL) {
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['datasource_info'] = &drupal_static(__FUNCTION__, array());
  }

  $datasource_info = &$drupal_static_fast['datasource_info'];

  if (empty($datasource_info)) {
    if ($cache = cache_get('wovi_datasource_info')) {
      $datasource_info = $cache->data;
    }
    else {
      $datasource_info = array();

      // Fetch all modules that implements hook_wovi_datasource_info().
      $modules = module_implements('wovi_datasource_info');
      foreach ($modules as $module) {
        // Fetch all datasource implementations from that module.
        $info = module_invoke($module, 'wovi_datasource_info');
        foreach (array_keys($info) as $delta) {
          // Assign module name to information.
          $info[$delta]['module'] = $module;

          // Merge in default values.
          $info[$delta] += array(
            'entities' => array(),
          );
        }

        // Append modules information to common information.
        $datasource_info += $info;
      }

      // Let other modules alter the entity info.
      drupal_alter('wovi_datasource_info', $datasource_info);
      cache_set('wovi_datasource_info', $datasource_info);
    }
  }

  if (empty($type)) {
    return $datasource_info;
  }
  elseif (isset($datasource_info[$type])) {
    return array($type => $datasource_info[$type]);
  }
}

/**
 * Create a new QueryBuilder Object and sets the given
 *
 * @param $type
 *  The type of data to recive in this request.
 * @return QueryBuilder
 * @throws QueryBuilderException
 *
 * @see QueryBuilder
 * @see QueryBuilderException
 */
function wovi_datasource_select($type) {
  module_load_include('class.php', 'wovi_datasource', 'QueryBuilder');
  $loader = new QueryBuilder();
  return $loader->select($type);
}

/**
 * Executes a query to all or one datasource module.
 *
 * @param $query
 *  The query information array containing the following information:
 *  - $operator: The query operation (Could be 'select', 'update' or 'insert').
 *  - $type: The entity name.
 *  - $join: Additional entity types to join.
 *  - $fields: An array of entity field names that should get returned.
 *  - $conditions: An array of field condition arrays:
 *    - Each array contains the following information:
 *      - $field_name: The Field name.
 *      - $value: The value for this condition:
 *      - $operator: The operator for the condition. (Default NULL)
 *  - $order: An array with settings to order the results.
 *    - $field: The field to order the results.
 *    - $direction: 'ASC' for ascending 'DESC' for descending ordering. (Default 'ASC')
 *  - $range: An array to slice the results.
 *    - $from: The start value.
 *    - $amount: The maximal amount of results you want to receive.
 * @param $configuration
 *  An array with additional configuration for the execution handler:
 *    - $datasource: If only a specific datasource should be executed. (Default NULL)
 *    - $cache: If FALSE no cache will be used. (Default TRUE)
 * @return array
 *  An associative array with datasource names as key and datasource
 *  information as value.
 *
 * @see hook_wovi_datasource_execute()
 * @see hook_wovi_datasource_result_alter()
 * @see hook_wovi_datasource_DATASOURCE_NAME_result_alter()
 */
function wovi_datasource_execute($query, $configuration) {
  // Use static cache to improve performance for multiple queries on the same request.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast = &drupal_static(__FUNCTION__, array());
  }

  // Generate cache id.
  $cid = md5(($configuration['datasource'] ? $configuration['datasource'] : '') . serialize($query));
  $cache_bin = variable_get('wovi_datasource_cache_bin', 'wovi_datasource_cache');

  // Tell other modules that this query will be executed.
  module_invoke_all('wovi_datasource_pre_execute', $query, $configuration['datasource']);

  // Check if current request is already in static cache.
  if (!isset($drupal_static_fast[$cid])) {
    // If not check for a HIT in the persistent cache.
    $cache = cache_get($cid, $cache_bin);
    if (!$cache) {
      // If both caches miss fetch results from datasources.
      $results = array(
        'data' => array(),
        'cid' => $cid,
        'created' => REQUEST_TIME,
        'expire' => REQUEST_TIME + variable_get('wovi_datasource_cache_expire', 3600),
      );


      switch ($query['operator']) {
        case 'select';
          $results['data'] = wovi_datasource_execute_select($query, $configuration);
          break;
        case 'update';
          $results['data'] = wovi_datasource_execute_update($query, $configuration);
          break;
        case 'insert';
          $results['data'] = wovi_datasource_execute_insert($query, $configuration);
          break;

      }


      // Let other modules alter the results.
      drupal_alter('wovi_datasource_results', $results['data']);

      // Write to persistent cache.
      cache_set($cid, $results, $cache_bin);

      // Append to static cache.
      $drupal_static_fast[$cid] = $results;
    }
    else {
      // Set static cache.
      $drupal_static_fast[$cid] = $cache->data;
    }
  }

  // Tell other modules that this execution is done and show the results.
  module_invoke_all('wovi_datasource_post_execute', $query, $configuration['datasource'], $drupal_static_fast[$cid]);

  return $drupal_static_fast[$cid];
}

/**
 * Executes a select query to all or one datasource module.
 *
 * @param $query
 *  The query information array containing the following information:
 *  - $operator: The query operation (In this case 'select').
 *  - $type: The entity name.
 *  - $join: Additional entity types to join.
 *  - $fields: An array of entity field names that should get returned.
 *  - $conditions: An array of field condition arrays:
 *    - Each array contains the following information:
 *      - $field_name: The Field name.
 *      - $value: The value for this condition:
 *      - $operator: The operator for the condition. (Default NULL)
 *  - $order: An array with settings to order the results.
 *    - $field: The field to order the results.
 *    - $direction: 'ASC' for ascending 'DESC' for descending ordering. (Default 'ASC')
 *  - $range: An array to slice the results.
 *    - $from: The start value.
 *    - $amount: The maximal amount of results you want to receive.
 * @param $configuration
 *  An array with additional configuration for the execution handler:
 *    - $datasource: If only a specific datasource should be executed. (Default NULL)
 *    - $cache: If FALSE no cache will be used. (Default TRUE)
 * @return array
 *  An array with datasource results keyed by the primary key.
 */
function wovi_datasource_execute_select($query, $configuration) {
  $results = array();

  foreach (wovi_datasource_get_info($configuration['datasource']) as $machine_name => $info) {
    // Check if the this module implements the requested entity.
    if (array_key_exists($query['type'], $info['entities'])) {
      $result = module_invoke($info['module'], 'wovi_datasource_execute', $query, $machine_name);

      // Let other modules alter the result.
      drupal_alter('wovi_datasource_' . $machine_name . '_result', $result);

      // Append result to results.
      $results[$machine_name] = $result;
    }
  }

  return $results;
}

/**
 * Executes a update query to all or one datasource module.
 *
 * @param $query
 *  The query information array containing the following information:
 *  - $operator: The query operation (In this case 'update').
 *  - $type: The entity name.
 *  - $join: Additional entity types to join.
 *  - $fields: An array of entity field names that should get returned.
 *  - $conditions: An array of field condition arrays:
 *    - Each array contains the following information:
 *      - $field_name: The Field name.
 *      - $value: The value for this condition:
 *      - $operator: The operator for the condition. (Default NULL)
 *  - $order: An array with settings to order the results.
 *    - $field: The field to order the results.
 *    - $direction: 'ASC' for ascending 'DESC' for descending ordering. (Default 'ASC')
 *  - $range: An array to slice the results.
 *    - $from: The start value.
 *    - $amount: The maximal amount of results you want to receive.
 * @param $configuration
 *  An array with additional configuration for the execution handler:
 *    - $datasource: If only a specific datasource should be executed. (Default NULL)
 *    - $cache: If FALSE no cache will be used. (Default TRUE)
 * @return array
 *  An array with datasource results keyed by the primary key.
 */
function wovi_datasource_execute_update($query, $configuration) {
  $results = array();

  return $results;
}

/**
 * Executes a insert query to all or one datasource module.
 *
 * @param $query
 *  The query information array containing the following information:
 *  - $operator: The query operation (In this case 'insert').
 *  - $type: The entity name.
 *  - $join: Additional entity types to join.
 *  - $fields: An array of entity field names that should get returned.
 *  - $conditions: An array of field condition arrays:
 *    - Each array contains the following information:
 *      - $field_name: The Field name.
 *      - $value: The value for this condition:
 *      - $operator: The operator for the condition. (Default NULL)
 *  - $order: An array with settings to order the results.
 *    - $field: The field to order the results.
 *    - $direction: 'ASC' for ascending 'DESC' for descending ordering. (Default 'ASC')
 *  - $range: An array to slice the results.
 *    - $from: The start value.
 *    - $amount: The maximal amount of results you want to receive.
 * @param $configuration
 *  An array with additional configuration for the execution handler:
 *    - $datasource: If only a specific datasource should be executed. (Default NULL)
 *    - $cache: If FALSE no cache will be used. (Default TRUE)
 * @return array
 *  An array with datasource results keyed by the primary key.
 */
function wovi_datasource_execute_insert($query, $configuration) {
  $results = array();

  return $results;
}