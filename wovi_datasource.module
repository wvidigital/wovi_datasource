<?php

define('WOVI_DATASOURCE_CACHE_MISS', 0x0);
define('WOVI_DATASOURCE_CACHE_HIT', 0x1);

/**
 * @file
 * Management module for abstract World Vision datasources.
 */

/**
 * Implements hook_menu().
 */
function wovi_datasource_menu() {
  $items = array();

  $items['admin/config/world-vision/datasource'] = array(
    'title' => 'Datasource',
    'description' => 'All datasource related configuration.',
    'page callback' => 'wovi_datasource_configuration_page',
    'access arguments' => array('administer wovi datasource'),
    'file' => 'wovi_datasource.admin.inc',
  );

  $items['admin/config/world-vision/datasource/instances'] = array(
    'title' => 'Instances',
    'description' => 'Configure all available datasource instances.',
    'page callback' => 'wovi_datasource_configuration_page',
    'access arguments' => array('administer wovi datasource'),
    'file' => 'wovi_datasource.admin.inc',
  );

  $items['admin/config/world-vision/datasource/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure the datasource manager.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wovi_datasource_settings_form'),
    'access arguments' => array('administer wovi datasource'),
    'file' => 'wovi_datasource.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function wovi_datasource_permission() {
  return array(
    'administer wovi datasources' => array(
      'title' => t('Administer datasources'),
      'description' => t('Allow user to administer all datasources.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function wovi_datasource_theme($existing, $type, $theme, $path) {
  return array(
    'wovi_datasource_configuration_list' => array(
      'variables' => array('content' => NULL),
      'file' => 'wovi_datasource.admin.inc',
    ),
  );
}

/**
 * Implements hook_flush_caches().
 */
function wovi_datasource_flush_caches() {
  // @todo maybe there is a nicer way to clear datasource_entity_cache in addition.
  db_truncate('wovi_datasource_entity_cache')->execute();
  return array('wovi_datasource_cache');
}

/**
 * Implements hook_admin_menu_cache_info().
 */
function wovi_datasource_admin_menu_cache_info() {
  return array(
    'wovi_datasource_cache' => array(
      'title' => t('Datasource Queries'),
      'callback' => '_wovi_datasource_cache_clear',
    ),
  );
}

/**
 * Helper function: Clears the query cache for settings form or admin menu
 *
 * @param null $cid
 * @param bool $wildcard
 */
function _wovi_datasource_cache_clear($cid = NULL, $wildcard = FALSE) {
  cache_clear_all($cid, 'wovi_datasource_cache', $wildcard);
  db_truncate('wovi_datasource_entity_cache')->execute();
}

/**
 * Get datasource information.
 *
 * @param $type
 *   The datasource type, e.g. ivision, for which the info shall be returned, or NULL
 *   to return an array with info about all types.
 *
 * @see hook_wovi_datasource_info()
 * @see hook_wovi_datasource_alter()
 */
function wovi_datasource_get_info($type = NULL) {
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['datasource_info'] = &drupal_static(__FUNCTION__, array());
  }

  $datasource_info = &$drupal_static_fast['datasource_info'];

  if (empty($datasource_info)) {
    if ($cache = cache_get('wovi_datasource_info')) {
      $datasource_info = $cache->data;
    }
    else {
      $datasource_info = array();

      // Fetch all modules that implements hook_wovi_datasource_info().
      $modules = module_implements('wovi_datasource_info');
      foreach ($modules as $module) {
        // Fetch all datasource implementations from that module.
        $info = module_invoke($module, 'wovi_datasource_info');
        foreach (array_keys($info) as $delta) {
          // Assign module name to information.
          $info[$delta]['module'] = $module;

          // Merge in default values.
          $info[$delta] += array(
            'entities' => array(),
          );
        }

        // Append modules information to common information.
        $datasource_info += $info;
      }

      // Let other modules alter the entity info.
      drupal_alter('wovi_datasource_info', $datasource_info);
      cache_set('wovi_datasource_info', $datasource_info);
    }
  }

  if (empty($type)) {
    return $datasource_info;
  }
  elseif (isset($datasource_info[$type])) {
    return array($type => $datasource_info[$type]);
  }
}

/**
 * Get datasource entity information.
 *
 * @param $type
 *   The datasource entity type, e.g. iv_child, for which the info shall be
 *   returned, or NULL to return an array with info about all types.
 *
 * @see hook_wovi_datasource_entity_info()
 * @see hook_wovi_datasource_entity_alter()
 */
function wovi_datasource_entity_get_info($type = NULL) {
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['datasource_entity_info'] = &drupal_static(__FUNCTION__, array());
  }

  $datasource_entity_info = &$drupal_static_fast['datasource_entity_info'];

  if (empty($datasource_entity_info)) {
    if ($cache = cache_get('wovi_datasource_entity_info')) {
      $datasource_entity_info = $cache->data;
    }
    else {
      $datasource_entity_info = array();

      // Fetch all modules that implements hook_wovi_datasource_entity_info().
      $modules = module_implements('wovi_datasource_entity_info');
      foreach ($modules as $module) {
        // Fetch all datasource entity implementations from that module.
        $info = module_invoke($module, 'wovi_datasource_entity_info');
        foreach (array_keys($info) as $entity_name) {
          // Assign module name to information.
          $info[$entity_name]['module'] = $module;

          // Merge in default values.
          $info[$entity_name] += array(
            'label' => $entity_name,
            'description' => '',
            'fields' => array(),
            'joins' => array(),
          );

          // Merge in default values for fields
          foreach ($info[$entity_name]['fields'] as $field_name => $field_info) {
            $field_info += array(
              'label' => $field_name,
              'default_value' => NULL,
            );
            $info[$entity_name]['fields'][$field_name] = $field_info;
          }

          // Merge in default values for joins
          foreach ($info[$entity_name]['joins'] as $join_name => $join_info) {
            $join_info += array(
              'label' => $join_name,
              'parameters' => array(),
            );
            $info[$entity_name]['joins'][$join_name] = $join_info;
          }
        }

        // Append modules information to common information.
        $datasource_entity_info += $info;
      }

      // Let other modules alter the entity info.
      drupal_alter('wovi_datasource_entity_info', $datasource_entity_info);
      cache_set('wovi_datasource_entity_info', $datasource_entity_info);
    }
  }

  if (empty($type)) {
    return $datasource_entity_info;
  }
  elseif (isset($datasource_entity_info[$type])) {
    return array($type => $datasource_entity_info[$type]);
  }
}

/**
 * Creates a new QueryBuilder Object for select queries and sets the $type.
 *
 * @param $type
 *  The type of data to receive in this query.
 * @return QueryBuilder
 *  A QueryBuilder Object for select queries.
 *
 * @throws QueryBuilderException
 *
 * @see QueryBuilder
 * @see QueryBuilderException
 */
function wovi_datasource_select($type) {
  module_load_include('class.php', 'wovi_datasource', 'QueryBuilder');
  $loader = new QueryBuilder();
  return $loader->select($type);
}

/**
 * Creates a new QueryBuilder Object for update queries and sets the $type.
 *
 * @param $type
 *  The type of data to update in this query.
 * @return QueryBuilder
 *  A QueryBuilder Object for update queries.
 *
 * @throws QueryBuilderException
 *
 * @see QueryBuilder
 * @see QueryBuilderException
 */
function wovi_datasource_update($type) {
  module_load_include('class.php', 'wovi_datasource', 'QueryBuilder');
  $loader = new QueryBuilder();
  return $loader->update($type);
}


/**
 * Executes a query to all or one datasource module.
 *
 * @param $query
 *  The query information array containing the following information:
 *  - $operator: The query operation (Could be 'select', 'update' or 'insert').
 *  - $type: The entity name.
 *  - $join: Additional entity types to join.
 *  - $fields: An array of entity field names that should get returned.
 *  - $conditions: An array of field condition arrays:
 *    - Each array contains the following information:
 *      - $field_name: The Field name.
 *      - $value: The value for this condition:
 *      - $operator: The operator for the condition. (Default NULL)
 *  - $order: An array with settings to order the results.
 *    - $field: The field to order the results.
 *    - $direction: 'ASC' for ascending 'DESC' for descending ordering. (Default 'ASC')
 *  - $range: An array to slice the results.
 *    - $from: The start value.
 *    - $amount: The maximal amount of results you want to receive.
 * @param $configuration
 *  An array with additional configuration for the execution handler:
 *    - $datasource: If only a specific datasource should be executed. (Default NULL)
 * @return array
 *  An associative array with datasource names as key and datasource
 *  information as value.
 *
 * @see hook_wovi_datasource_execute()
 * @see hook_wovi_datasource_result_alter()
 * @see hook_wovi_datasource_DATASOURCE_NAME_result_alter()
 */
function wovi_datasource_execute($query, $configuration) {
  $response = array(
    'results' => array(),
  );

  // Tell other modules that this query will be executed.
  module_invoke_all('wovi_datasource_pre_execute', $query, $configuration['datasource']);

  switch ($query['operator']) {
    case 'select';
      $response = wovi_datasource_execute_select($query, $configuration);
      break;
    case 'update';
      $response = wovi_datasource_execute_update($query, $configuration);
      break;
    case 'insert';
      $response = wovi_datasource_execute_insert($query, $configuration);
      break;
  }

  module_invoke_all('wovi_datasource_post_execute', $query, $configuration['datasource'], $response);

  return $response;


}

/**
 * Executes a select query to all or one datasource module.
 *
 * @param $query
 *  The query information array containing the following information:
 *  - $operator: The query operation (In this case 'select').
 *  - $type: The entity name.
 *  - $join: Additional entity types to join.
 *  - $fields: An array of entity field names that should get returned.
 *  - $conditions: An array of field condition arrays:
 *    - Each array contains the following information:
 *      - $field_name: The Field name.
 *      - $value: The value for this condition:
 *      - $operator: The operator for the condition. (Default NULL)
 *  - $order: An array with settings to order the results.
 *    - $field: The field to order the results.
 *    - $direction: 'ASC' for ascending 'DESC' for descending ordering. (Default 'ASC')
 *  - $range: An array to slice the results.
 *    - $from: The start value.
 *    - $amount: The maximal amount of results you want to receive.
 * @param $configuration
 *  An array with additional configuration for the execution handler:
 *    - $datasource: If only a specific datasource should be executed. (Default NULL)
 * @return array
 *  An array with datasource results keyed by the primary key.
 */
function wovi_datasource_execute_select($query, $configuration) {
  static $drupal_static_fast;

  if (!isset($drupal_static_fast)) {
    $drupal_static_fast = &drupal_static(__FUNCTION__, array());
  }

//  @todo moved to QueryBuilder class.
//  if (!isset($configuration['cache'])) {
//    // Get default cache settings.
//    $configuration['cache'] = variable_get('wovi_datasource_cache_default', TRUE);
//  }

  // Generate cache id.
  $cid = md5(($configuration['datasource'] ? $configuration['datasource'] : '') . serialize($query));
  $cache_bin = variable_get('wovi_datasource_cache_bin', 'wovi_datasource_cache');

  // Tell other modules that this query will be executed.
  module_invoke_all('wovi_datasource_pre_execute_select', $query, $configuration['datasource']);

  // Check if current request is already in static cache.
  if (!isset($drupal_static_fast[$cid])) {

    // If not check for a HIT in the persistent cache.
    $cache = $configuration['cache'] ? cache_get($cid, $cache_bin) : NULL;

    if (!$cache) {
      // If both caches miss fetch results from datasources.
      $results = array();
      $extra = array();


      foreach (wovi_datasource_get_info($configuration['datasource']) as $machine_name => $info) {
        // Check if the this module implements the requested entity.
        if (array_key_exists($query['type'], $info['entities']) && $info['entities'][$query['type']]['select'] === TRUE) {
          $datasource_result = module_invoke($info['module'], 'wovi_datasource_execute_select', $query, $machine_name);
          // Check that result has no errors.
          if ($datasource_result['error'] === FALSE) {
            // Let other modules alter the result.
            drupal_alter('wovi_datasource_' . $machine_name . '_select_result', $datasource_result['results']);

            if (variable_get('wovi_datasource_cache_default', TRUE)) {
              // Flush all related information for this $cid.
              wovi_datasource_query_cache_flush($cid);
              // Save datasource entity relation to database.
              wovi_datasource_query_cache_set(array_keys($datasource_result['results']), $query['type'], $cid);
            }

            // Append datasource result to results.
            $results[$machine_name] = $datasource_result['results'];

            // Append additional datasource information.
            unset($datasource_result['results']);
            $extra[$machine_name] = $datasource_result;

          }
          else {
            // Append datasource result to results.
            $results[$machine_name] = array();

            // Append additional datasource information.
            unset($datasource_result['results']);
            $extra[$machine_name] = $datasource_result;
          }
        }
      }

      // Build response.
      $response = array(
        'results' => $results,
        'cache' => FALSE,
        'extra' => $extra,
      );

      // Append cache information.
      if (variable_get('wovi_datasource_cache_default', TRUE)) {
        $response['cache'] = array(
          'cid' => $cid,
          'created' => REQUEST_TIME,
          'expire' => REQUEST_TIME + variable_get('wovi_datasource_cache_expire', 3600),
          'status' => WOVI_DATASOURCE_CACHE_MISS,
        );
      }

      // Let other modules alter the results.
      drupal_alter('wovi_datasource_select_results', $response['results']);

      if (variable_get('wovi_datasource_cache_default', TRUE)) {
        // Write to persistent cache.
        cache_set($cid, $response, $cache_bin);
        if (!$configuration['cache']) {
          // If querie dosn't use cache remove cache info.
          $response['cache'] = FALSE;
        }
      }

      // Append to static cache.
      $drupal_static_fast[$cid] = $response;
    }
    else {
      // Get from static cache.
      $drupal_static_fast[$cid] = $cache->data;
      $drupal_static_fast[$cid]['cache']['status'] = WOVI_DATASOURCE_CACHE_HIT;
    }
  }

  // Tell other modules that this execution is done and show the results.
  module_invoke_all('wovi_datasource_post_execute_select', $query, $configuration['datasource'], $drupal_static_fast[$cid]);

  return $drupal_static_fast[$cid];
}

/**
 * Executes a update query to all or one datasource module.
 *
 * @param $query
 *  The query information array containing the following information:
 *  - $operator: The query operation (In this case 'update').
 *  - $type: The entity name.
 *  - $join: Additional entity types to join.
 *  - $fields: An array of entity field names that should get returned.
 *  - $conditions: An array of field condition arrays:
 *    - Each array contains the following information:
 *      - $field_name: The Field name.
 *      - $value: The value for this condition:
 *      - $operator: The operator for the condition. (Default NULL)
 *  - $order: An array with settings to order the results.
 *    - $field: The field to order the results.
 *    - $direction: 'ASC' for ascending 'DESC' for descending ordering. (Default 'ASC')
 *  - $range: An array to slice the results.
 *    - $from: The start value.
 *    - $amount: The maximal amount of results you want to receive.
 * @param $configuration
 *  An array with additional configuration for the execution handler:
 *    - $datasource: If only a specific datasource should be executed. (Default NULL)
 *    - $cache: If FALSE no cache will be used. (Default TRUE)
 * @return array
 *  An array with datasource results keyed by the primary key.
 */
function wovi_datasource_execute_update($query, $configuration) {
  $results = array();

  dpm($query);
  // Remove cached queries matching the quried entities.
  //wovi_datasource_query_cache_delete();

  return $results;
}

/**
 * Executes a insert query to all or one datasource module.
 *
 * @param $query
 *  The query information array containing the following information:
 *  - $operator: The query operation (In this case 'insert').
 *  - $type: The entity name.
 *  - $join: Additional entity types to join.
 *  - $fields: An array of entity field names that should get returned.
 *  - $conditions: An array of field condition arrays:
 *    - Each array contains the following information:
 *      - $field_name: The Field name.
 *      - $value: The value for this condition:
 *      - $operator: The operator for the condition. (Default NULL)
 *  - $order: An array with settings to order the results.
 *    - $field: The field to order the results.
 *    - $direction: 'ASC' for ascending 'DESC' for descending ordering. (Default 'ASC')
 *  - $range: An array to slice the results.
 *    - $from: The start value.
 *    - $amount: The maximal amount of results you want to receive.
 * @param $configuration
 *  An array with additional configuration for the execution handler:
 *    - $datasource: If only a specific datasource should be executed. (Default NULL)
 *    - $cache: If FALSE no cache will be used. (Default TRUE)
 * @return array
 *  An array with datasource results keyed by the primary key.
 */
function wovi_datasource_execute_insert($query, $configuration) {
  $results = array();

  return $results;
}

/**
 * @param $primary_keys
 *  One or multiple primary keys for the given $datasource_entity_type.
 * @param $datasource_entity_type
 *  The type of the datasource entity.
 * @param $cid
 *  The cache id.
 */
function wovi_datasource_query_cache_set($primary_keys, $datasource_entity_type, $cid) {
  foreach ($primary_keys as $primary_key) {
    $record = (object) array(
      'cid' => $cid,
      'datasource_entity_type' => $datasource_entity_type,
      'primary_key' => $primary_key,
      'timestamp' => REQUEST_TIME,
    );

    try {
      // Try to insert entry.
      drupal_write_record('wovi_datasource_entity_cache', $record);
    } catch (PDOException $e) {
      if ($e->getCode() == 23000) {
        // Update entry.
        drupal_write_record('wovi_datasource_entity_cache', $record, array(
          'cid',
          'datasource_entity_type',
          'primary_key',
        ));
      }
    }
  }
}

/**
 * Clears all queries from cache where datasource entities are related matching
 * $datasource_entity_type and $primary_keys.
 *
 * @param $primary_keys
 *  The primary key of the entity or entities.
 * @param $datasource_entity_type
 *  The entity datasource type.
 */
function wovi_datasource_query_cache_delete($primary_keys, $datasource_entity_type) {
  // Standardize $primary_keys to an array.
  if (!is_array($primary_keys)) {
    $primary_keys = array($primary_keys);
  }

  // Get all affected $cids from database.
  $cids = db_select('wovi_datasource_entity_cache', 'wdec')
    ->fields('wdec', array('cid'))
    ->condition('datasource_entity_type', $datasource_entity_type)
    ->condition('primray_key', $primary_keys)
    ->execute()
    ->fetchAllKeyed();

  // Get cache bin.
  $cache_bin = variable_get('wovi_datasource_cache_bin', 'wovi_datasource_cache');

  // Clear all affected cached queries.
  cache_clear_all($cids, $cache_bin);

  // Also delete relations from
  db_delete('wovi_datasource_entity_cache')
    ->condition('datasource_entity_type', $datasource_entity_type)
    ->condition('primary_key', $primary_keys)
    ->execute();
}

/**
 * Flushs all cached information from datasource entity cache.
 * If $cid is provided only entries with this cache id will be deleted.
 *
 * @param $cid
 *  The cache id (Default NULL)
 */
function wovi_datasource_query_cache_flush($cid = NULL) {
  $query = db_delete('wovi_datasource_entity_cache');

  if ($cid) {
    $query->condition('cid', $cid);
  }

  $query->execute();
}